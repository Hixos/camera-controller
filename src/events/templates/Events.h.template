/**
 * Copyright (c) $year Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

// Autogen date:    $gen_date

#include <cassert>
#include <cstdint>
#include <string>
#include <type_traits>
#include <nlohmann/json.hpp>

#include "EventBase.h"

$includes

#define JSON_EVENT_SERIALIZATION_INTRUSIVE_NOARGS(Type)          \
    friend void to_json(nlohmann::json& nlohmann_json_j,         \
                        const Type& nlohmann_json_t)             \
    {                                                            \
        nlohmann_json_j["event_id"] = Type::id;                  \
    }                                                            \
    friend void from_json(const nlohmann::json& nlohmann_json_j, \
                          Type& nlohmann_json_t)                 \
    {                                                            \
    }

#define JSON_EVENT_SERIALIZATION_INTRUSIVE(Type, ...)             \
    friend void to_json(nlohmann::json& nlohmann_json_j,          \
                        const Type& nlohmann_json_t)              \
    {                                                             \
        nlohmann_json_j["event_id"] = Type::id;                   \
        NLOHMANN_JSON_EXPAND(                                     \
            NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__))   \
    }                                                             \
    friend void from_json(const nlohmann::json& nlohmann_json_j,  \
                          Type& nlohmann_json_t)                  \
    {                                                             \
        NLOHMANN_JSON_EXPAND(                                     \
            NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__)) \
    }

enum Topics : uint8_t
{
$topic_enum
};

string getTopicName(uint8_t topic);
uint8_t getTopicID(string topic_str);

$event_dec

