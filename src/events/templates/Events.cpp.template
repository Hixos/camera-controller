/**
 * Copyright (c) $year Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

// Autogen date:    $gen_date

#include <map>
#include <memory>
#include <stdexcept>
#include "Events.h"

using std::map;
using std::make_shared;

const map<uint8_t, string> topic_string_map = {
$topic_string_map
};

const map<string, uint8_t> topic_id_map = {
$topic_id_map
};


string getTopicName(uint8_t topic)
{
    if (topic_string_map.count(topic) > 0)
        return topic_string_map.at(topic);
    else
    {
        return std::to_string(topic);
    }
}

uint8_t getTopicID(string topic_str)
{
    if (topic_id_map.count(topic_str) > 0)
        return topic_id_map.at(topic_str);
    else
    {
        return 255;
    }
}

$event_def

EventPtr jsonToEvent(const nlohmann::json& j)
{
    switch (static_cast<uint16_t>(j.at("event_id")))
    {
        $json_to_event_cases

        default:
            throw std::out_of_range{"No event with provided ID"};
            break;
    }
}