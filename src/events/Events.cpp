/**
 * Copyright (c) 2022 Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

// Autogen date:    2022-07-23 02:27:59.975319

#include "Events.h"

#include <map>
#include <memory>
#include <stdexcept>

using std::make_shared;
using std::map;

const map<uint8_t, string> topic_string_map = {
    {TOPIC_CAMERA_CONFIG, "TOPIC_CAMERA_CONFIG"},
    {TOPIC_CAMERA_CMD, "TOPIC_CAMERA_CMD"},
    {TOPIC_CAMERA_EVENT, "TOPIC_CAMERA_EVENT"},
    {TOPIC_REMOTE_CMD, "TOPIC_REMOTE_CMD"}};

const map<string, uint8_t> topic_id_map = {
    {"TOPIC_CAMERA_CONFIG", TOPIC_CAMERA_CONFIG},
    {"TOPIC_CAMERA_CMD", TOPIC_CAMERA_CMD},
    {"TOPIC_CAMERA_EVENT", TOPIC_CAMERA_EVENT},
    {"TOPIC_REMOTE_CMD", TOPIC_REMOTE_CMD}};

string getTopicName(uint8_t topic)
{
    if (topic_string_map.count(topic) > 0)
        return topic_string_map.at(topic);
    else
    {
        return std::to_string(topic);
    }
}

uint8_t getTopicID(string topic_str)
{
    if (topic_id_map.count(topic_str) > 0)
        return topic_id_map.at(topic_str);
    else
    {
        return 255;
    }
}

EventCameraCmdConnect::EventCameraCmdConnect() : Event(id) {}

string EventCameraCmdConnect::name() const { return "EventCameraCmdConnect"; }

string EventCameraCmdConnect::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdConnect::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCmdDisconnect::EventCameraCmdDisconnect() : Event(id) {}

string EventCameraCmdDisconnect::name() const
{
    return "EventCameraCmdDisconnect";
}

string EventCameraCmdDisconnect::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdDisconnect::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCmdRecoverError::EventCameraCmdRecoverError() : Event(id) {}

string EventCameraCmdRecoverError::name() const
{
    return "EventCameraCmdRecoverError";
}

string EventCameraCmdRecoverError::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdRecoverError::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCmdCapture::EventCameraCmdCapture() : Event(id) {}

string EventCameraCmdCapture::name() const { return "EventCameraCmdCapture"; }

string EventCameraCmdCapture::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdCapture::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCmdCapture_Internal::EventCameraCmdCapture_Internal() : Event(id) {}

string EventCameraCmdCapture_Internal::name() const
{
    return "EventCameraCmdCapture_Internal";
}

string EventCameraCmdCapture_Internal::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdCapture_Internal::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCmdDownload::EventCameraCmdDownload(bool download)
    : Event(id), download(download)
{
}

string EventCameraCmdDownload::name() const { return "EventCameraCmdDownload"; }

string EventCameraCmdDownload::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdDownload::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCmdDownload_Internal::EventCameraCmdDownload_Internal() : Event(id)
{
}

string EventCameraCmdDownload_Internal::name() const
{
    return "EventCameraCmdDownload_Internal";
}

string EventCameraCmdDownload_Internal::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdDownload_Internal::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraConnected::EventCameraConnected() : Event(id) {}

string EventCameraConnected::name() const { return "EventCameraConnected"; }

string EventCameraConnected::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraConnected::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraReady::EventCameraReady() : Event(id) {}

string EventCameraReady::name() const { return "EventCameraReady"; }

string EventCameraReady::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraReady::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraDisconnected::EventCameraDisconnected() : Event(id) {}

string EventCameraDisconnected::name() const
{
    return "EventCameraDisconnected";
}

string EventCameraDisconnected::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraDisconnected::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraConnectionError::EventCameraConnectionError() : Event(id) {}

string EventCameraConnectionError::name() const
{
    return "EventCameraConnectionError";
}

string EventCameraConnectionError::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraConnectionError::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraError::EventCameraError() : Event(id) {}

string EventCameraError::name() const { return "EventCameraError"; }

string EventCameraError::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraError::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraIgnoreError::EventCameraIgnoreError() : Event(id) {}

string EventCameraIgnoreError::name() const { return "EventCameraIgnoreError"; }

string EventCameraIgnoreError::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraIgnoreError::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCmdLowLatency::EventCameraCmdLowLatency(bool low_latency)
    : Event(id), low_latency(low_latency)
{
}

string EventCameraCmdLowLatency::name() const
{
    return "EventCameraCmdLowLatency";
}

string EventCameraCmdLowLatency::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCmdLowLatency::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraCaptureDone::EventCameraCaptureDone(bool downloaded, string file)
    : Event(id), downloaded(downloaded), file(file)
{
}

string EventCameraCaptureDone::name() const { return "EventCameraCaptureDone"; }

string EventCameraCaptureDone::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraCaptureDone::to_json() const
{
    return nlohmann::json(*this);
}

EventCameraControllerState::EventCameraControllerState(uint8_t state)
    : Event(id), state(state)
{
}

string EventCameraControllerState::name() const
{
    return "EventCameraControllerState";
}

string EventCameraControllerState::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventCameraControllerState::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetShutterSpeed::EventConfigGetShutterSpeed() : Event(id) {}

string EventConfigGetShutterSpeed::name() const
{
    return "EventConfigGetShutterSpeed";
}

string EventConfigGetShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetShutterSpeed::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetChoicesShutterSpeed::EventConfigGetChoicesShutterSpeed()
    : Event(id)
{
}

string EventConfigGetChoicesShutterSpeed::name() const
{
    return "EventConfigGetChoicesShutterSpeed";
}

string EventConfigGetChoicesShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetChoicesShutterSpeed::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigSetShutterSpeed::EventConfigSetShutterSpeed(int32_t shutter_speed)
    : Event(id), shutter_speed(shutter_speed)
{
}

string EventConfigSetShutterSpeed::name() const
{
    return "EventConfigSetShutterSpeed";
}

string EventConfigSetShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigSetShutterSpeed::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueShutterSpeed::EventConfigValueShutterSpeed(
    int32_t shutter_speed, bool bulb)
    : Event(id), shutter_speed(shutter_speed), bulb(bulb)
{
}

string EventConfigValueShutterSpeed::name() const
{
    return "EventConfigValueShutterSpeed";
}

string EventConfigValueShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueShutterSpeed::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigChoicesShutterSpeed::EventConfigChoicesShutterSpeed(
    vector<int32_t> shutter_speed_choices)
    : Event(id), shutter_speed_choices(shutter_speed_choices)
{
}

string EventConfigChoicesShutterSpeed::name() const
{
    return "EventConfigChoicesShutterSpeed";
}

string EventConfigChoicesShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigChoicesShutterSpeed::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetAperture::EventConfigGetAperture() : Event(id) {}

string EventConfigGetAperture::name() const { return "EventConfigGetAperture"; }

string EventConfigGetAperture::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetAperture::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetChoicesAperture::EventConfigGetChoicesAperture() : Event(id) {}

string EventConfigGetChoicesAperture::name() const
{
    return "EventConfigGetChoicesAperture";
}

string EventConfigGetChoicesAperture::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetChoicesAperture::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigSetAperture::EventConfigSetAperture(int32_t aperture)
    : Event(id), aperture(aperture)
{
}

string EventConfigSetAperture::name() const { return "EventConfigSetAperture"; }

string EventConfigSetAperture::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigSetAperture::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueAperture::EventConfigValueAperture(int32_t aperture)
    : Event(id), aperture(aperture)
{
}

string EventConfigValueAperture::name() const
{
    return "EventConfigValueAperture";
}

string EventConfigValueAperture::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueAperture::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigChoicesAperture::EventConfigChoicesAperture(
    vector<int32_t> aperture_choices)
    : Event(id), aperture_choices(aperture_choices)
{
}

string EventConfigChoicesAperture::name() const
{
    return "EventConfigChoicesAperture";
}

string EventConfigChoicesAperture::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigChoicesAperture::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetISO::EventConfigGetISO() : Event(id) {}

string EventConfigGetISO::name() const { return "EventConfigGetISO"; }

string EventConfigGetISO::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetISO::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetChoicesISO::EventConfigGetChoicesISO() : Event(id) {}

string EventConfigGetChoicesISO::name() const
{
    return "EventConfigGetChoicesISO";
}

string EventConfigGetChoicesISO::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetChoicesISO::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigSetISO::EventConfigSetISO(int32_t iso) : Event(id), iso(iso) {}

string EventConfigSetISO::name() const { return "EventConfigSetISO"; }

string EventConfigSetISO::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigSetISO::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueISO::EventConfigValueISO(int32_t iso) : Event(id), iso(iso) {}

string EventConfigValueISO::name() const { return "EventConfigValueISO"; }

string EventConfigValueISO::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueISO::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigChoicesISO::EventConfigChoicesISO(vector<int32_t> iso_choices)
    : Event(id), iso_choices(iso_choices)
{
}

string EventConfigChoicesISO::name() const { return "EventConfigChoicesISO"; }

string EventConfigChoicesISO::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigChoicesISO::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetBattery::EventConfigGetBattery() : Event(id) {}

string EventConfigGetBattery::name() const { return "EventConfigGetBattery"; }

string EventConfigGetBattery::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetBattery::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueBattery::EventConfigValueBattery(int32_t battery)
    : Event(id), battery(battery)
{
}

string EventConfigValueBattery::name() const
{
    return "EventConfigValueBattery";
}

string EventConfigValueBattery::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueBattery::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetFocalLength::EventConfigGetFocalLength() : Event(id) {}

string EventConfigGetFocalLength::name() const
{
    return "EventConfigGetFocalLength";
}

string EventConfigGetFocalLength::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetFocalLength::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueFocalLength::EventConfigValueFocalLength(int32_t focal_length)
    : Event(id), focal_length(focal_length)
{
}

string EventConfigValueFocalLength::name() const
{
    return "EventConfigValueFocalLength";
}

string EventConfigValueFocalLength::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueFocalLength::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetFocusMode::EventConfigGetFocusMode() : Event(id) {}

string EventConfigGetFocusMode::name() const
{
    return "EventConfigGetFocusMode";
}

string EventConfigGetFocusMode::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetFocusMode::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueFocusMode::EventConfigValueFocusMode(string focus_mode)
    : Event(id), focus_mode(focus_mode)
{
}

string EventConfigValueFocusMode::name() const
{
    return "EventConfigValueFocusMode";
}

string EventConfigValueFocusMode::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueFocusMode::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetLongExpNR::EventConfigGetLongExpNR() : Event(id) {}

string EventConfigGetLongExpNR::name() const
{
    return "EventConfigGetLongExpNR";
}

string EventConfigGetLongExpNR::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetLongExpNR::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueLongExpNR::EventConfigValueLongExpNR(bool long_exp_nr)
    : Event(id), long_exp_nr(long_exp_nr)
{
}

string EventConfigValueLongExpNR::name() const
{
    return "EventConfigValueLongExpNR";
}

string EventConfigValueLongExpNR::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueLongExpNR::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetVibRed::EventConfigGetVibRed() : Event(id) {}

string EventConfigGetVibRed::name() const { return "EventConfigGetVibRed"; }

string EventConfigGetVibRed::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetVibRed::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueVibRed::EventConfigValueVibRed(bool vr) : Event(id), vr(vr) {}

string EventConfigValueVibRed::name() const { return "EventConfigValueVibRed"; }

string EventConfigValueVibRed::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueVibRed::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetCaptureTarget::EventConfigGetCaptureTarget() : Event(id) {}

string EventConfigGetCaptureTarget::name() const
{
    return "EventConfigGetCaptureTarget";
}

string EventConfigGetCaptureTarget::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetCaptureTarget::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigSetCaptureTarget::EventConfigSetCaptureTarget(string target)
    : Event(id), target(target)
{
}

string EventConfigSetCaptureTarget::name() const
{
    return "EventConfigSetCaptureTarget";
}

string EventConfigSetCaptureTarget::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigSetCaptureTarget::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueCaptureTarget::EventConfigValueCaptureTarget(string target)
    : Event(id), target(target)
{
}

string EventConfigValueCaptureTarget::name() const
{
    return "EventConfigValueCaptureTarget";
}

string EventConfigValueCaptureTarget::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueCaptureTarget::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetCameraMode::EventConfigGetCameraMode() : Event(id) {}

string EventConfigGetCameraMode::name() const
{
    return "EventConfigGetCameraMode";
}

string EventConfigGetCameraMode::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetCameraMode::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigValueCameraMode::EventConfigValueCameraMode(string target)
    : Event(id), target(target)
{
}

string EventConfigValueCameraMode::name() const
{
    return "EventConfigValueCameraMode";
}

string EventConfigValueCameraMode::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigValueCameraMode::to_json() const
{
    return nlohmann::json(*this);
}

EventConfigGetCommon::EventConfigGetCommon() : Event(id) {}

string EventConfigGetCommon::name() const { return "EventConfigGetCommon"; }

string EventConfigGetCommon::to_string(int indent) const
{
    nlohmann::json j = to_json();
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

nlohmann::json EventConfigGetCommon::to_json() const
{
    return nlohmann::json(*this);
}

EventPtr jsonToEvent(const nlohmann::json& j)
{
    switch (static_cast<uint16_t>(j.at("event_id")))
    {
        case EventCameraCmdConnect::id:
            return make_shared<EventCameraCmdConnect>(
                j.get<EventCameraCmdConnect>());
            break;
        case EventCameraCmdDisconnect::id:
            return make_shared<EventCameraCmdDisconnect>(
                j.get<EventCameraCmdDisconnect>());
            break;
        case EventCameraCmdRecoverError::id:
            return make_shared<EventCameraCmdRecoverError>(
                j.get<EventCameraCmdRecoverError>());
            break;
        case EventCameraCmdCapture::id:
            return make_shared<EventCameraCmdCapture>(
                j.get<EventCameraCmdCapture>());
            break;
        case EventCameraCmdCapture_Internal::id:
            return make_shared<EventCameraCmdCapture_Internal>(
                j.get<EventCameraCmdCapture_Internal>());
            break;
        case EventCameraCmdDownload::id:
            return make_shared<EventCameraCmdDownload>(
                j.get<EventCameraCmdDownload>());
            break;
        case EventCameraCmdDownload_Internal::id:
            return make_shared<EventCameraCmdDownload_Internal>(
                j.get<EventCameraCmdDownload_Internal>());
            break;
        case EventCameraConnected::id:
            return make_shared<EventCameraConnected>(
                j.get<EventCameraConnected>());
            break;
        case EventCameraReady::id:
            return make_shared<EventCameraReady>(j.get<EventCameraReady>());
            break;
        case EventCameraDisconnected::id:
            return make_shared<EventCameraDisconnected>(
                j.get<EventCameraDisconnected>());
            break;
        case EventCameraConnectionError::id:
            return make_shared<EventCameraConnectionError>(
                j.get<EventCameraConnectionError>());
            break;
        case EventCameraError::id:
            return make_shared<EventCameraError>(j.get<EventCameraError>());
            break;
        case EventCameraIgnoreError::id:
            return make_shared<EventCameraIgnoreError>(
                j.get<EventCameraIgnoreError>());
            break;
        case EventCameraCmdLowLatency::id:
            return make_shared<EventCameraCmdLowLatency>(
                j.get<EventCameraCmdLowLatency>());
            break;
        case EventCameraCaptureDone::id:
            return make_shared<EventCameraCaptureDone>(
                j.get<EventCameraCaptureDone>());
            break;
        case EventCameraControllerState::id:
            return make_shared<EventCameraControllerState>(
                j.get<EventCameraControllerState>());
            break;
        case EventConfigGetShutterSpeed::id:
            return make_shared<EventConfigGetShutterSpeed>(
                j.get<EventConfigGetShutterSpeed>());
            break;
        case EventConfigGetChoicesShutterSpeed::id:
            return make_shared<EventConfigGetChoicesShutterSpeed>(
                j.get<EventConfigGetChoicesShutterSpeed>());
            break;
        case EventConfigSetShutterSpeed::id:
            return make_shared<EventConfigSetShutterSpeed>(
                j.get<EventConfigSetShutterSpeed>());
            break;
        case EventConfigValueShutterSpeed::id:
            return make_shared<EventConfigValueShutterSpeed>(
                j.get<EventConfigValueShutterSpeed>());
            break;
        case EventConfigChoicesShutterSpeed::id:
            return make_shared<EventConfigChoicesShutterSpeed>(
                j.get<EventConfigChoicesShutterSpeed>());
            break;
        case EventConfigGetAperture::id:
            return make_shared<EventConfigGetAperture>(
                j.get<EventConfigGetAperture>());
            break;
        case EventConfigGetChoicesAperture::id:
            return make_shared<EventConfigGetChoicesAperture>(
                j.get<EventConfigGetChoicesAperture>());
            break;
        case EventConfigSetAperture::id:
            return make_shared<EventConfigSetAperture>(
                j.get<EventConfigSetAperture>());
            break;
        case EventConfigValueAperture::id:
            return make_shared<EventConfigValueAperture>(
                j.get<EventConfigValueAperture>());
            break;
        case EventConfigChoicesAperture::id:
            return make_shared<EventConfigChoicesAperture>(
                j.get<EventConfigChoicesAperture>());
            break;
        case EventConfigGetISO::id:
            return make_shared<EventConfigGetISO>(j.get<EventConfigGetISO>());
            break;
        case EventConfigGetChoicesISO::id:
            return make_shared<EventConfigGetChoicesISO>(
                j.get<EventConfigGetChoicesISO>());
            break;
        case EventConfigSetISO::id:
            return make_shared<EventConfigSetISO>(j.get<EventConfigSetISO>());
            break;
        case EventConfigValueISO::id:
            return make_shared<EventConfigValueISO>(
                j.get<EventConfigValueISO>());
            break;
        case EventConfigChoicesISO::id:
            return make_shared<EventConfigChoicesISO>(
                j.get<EventConfigChoicesISO>());
            break;
        case EventConfigGetBattery::id:
            return make_shared<EventConfigGetBattery>(
                j.get<EventConfigGetBattery>());
            break;
        case EventConfigValueBattery::id:
            return make_shared<EventConfigValueBattery>(
                j.get<EventConfigValueBattery>());
            break;
        case EventConfigGetFocalLength::id:
            return make_shared<EventConfigGetFocalLength>(
                j.get<EventConfigGetFocalLength>());
            break;
        case EventConfigValueFocalLength::id:
            return make_shared<EventConfigValueFocalLength>(
                j.get<EventConfigValueFocalLength>());
            break;
        case EventConfigGetFocusMode::id:
            return make_shared<EventConfigGetFocusMode>(
                j.get<EventConfigGetFocusMode>());
            break;
        case EventConfigValueFocusMode::id:
            return make_shared<EventConfigValueFocusMode>(
                j.get<EventConfigValueFocusMode>());
            break;
        case EventConfigGetLongExpNR::id:
            return make_shared<EventConfigGetLongExpNR>(
                j.get<EventConfigGetLongExpNR>());
            break;
        case EventConfigValueLongExpNR::id:
            return make_shared<EventConfigValueLongExpNR>(
                j.get<EventConfigValueLongExpNR>());
            break;
        case EventConfigGetVibRed::id:
            return make_shared<EventConfigGetVibRed>(
                j.get<EventConfigGetVibRed>());
            break;
        case EventConfigValueVibRed::id:
            return make_shared<EventConfigValueVibRed>(
                j.get<EventConfigValueVibRed>());
            break;
        case EventConfigGetCaptureTarget::id:
            return make_shared<EventConfigGetCaptureTarget>(
                j.get<EventConfigGetCaptureTarget>());
            break;
        case EventConfigSetCaptureTarget::id:
            return make_shared<EventConfigSetCaptureTarget>(
                j.get<EventConfigSetCaptureTarget>());
            break;
        case EventConfigValueCaptureTarget::id:
            return make_shared<EventConfigValueCaptureTarget>(
                j.get<EventConfigValueCaptureTarget>());
            break;
        case EventConfigGetCameraMode::id:
            return make_shared<EventConfigGetCameraMode>(
                j.get<EventConfigGetCameraMode>());
            break;
        case EventConfigValueCameraMode::id:
            return make_shared<EventConfigValueCameraMode>(
                j.get<EventConfigValueCameraMode>());
            break;
        case EventConfigGetCommon::id:
            return make_shared<EventConfigGetCommon>(
                j.get<EventConfigGetCommon>());
            break;

        default:
            throw std::out_of_range{"No event with provided ID"};
            break;
    }
}