/**
 * Copyright (c) 2022 Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

// Autogen date:    2022-07-18 21:40:22.449686

#include "Events.h"

#include <map>

using std::map;

const map<uint8_t, string> topic_string_map = {
    {TOPIC_CAMERA_CONFIG, "TOPIC_CAMERA_CONFIG"},
    {TOPIC_CAMERA_CMD, "TOPIC_CAMERA_CMD"},
    {TOPIC_CAMERA_EVENT, "TOPIC_CAMERA_EVENT"}};

const map<string, uint8_t> topic_id_map = {
    {"TOPIC_CAMERA_CONFIG", TOPIC_CAMERA_CONFIG},
    {"TOPIC_CAMERA_CMD", TOPIC_CAMERA_CMD},
    {"TOPIC_CAMERA_EVENT", TOPIC_CAMERA_EVENT}};

string getTopicName(uint8_t topic)
{
    if (topic_string_map.count(topic) > 0)
        return topic_string_map.at(topic);
    else
    {
        return std::to_string(topic);
    }
}

uint8_t getTopicID(string topic_str)
{
    if (topic_id_map.count(topic_str) > 0)
        return topic_id_map.at(topic_str);
    else
    {
        return 255;
    }
}

EventCameraCmdConnect::EventCameraCmdConnect() : Event(id) {}

string EventCameraCmdConnect::name() const { return "EventCameraCmdConnect"; }

string EventCameraCmdConnect::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCmdDisconnect::EventCameraCmdDisconnect() : Event(id) {}

string EventCameraCmdDisconnect::name() const
{
    return "EventCameraCmdDisconnect";
}

string EventCameraCmdDisconnect::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCmdRecoverError::EventCameraCmdRecoverError() : Event(id) {}

string EventCameraCmdRecoverError::name() const
{
    return "EventCameraCmdRecoverError";
}

string EventCameraCmdRecoverError::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCmdCapture::EventCameraCmdCapture() : Event(id) {}

string EventCameraCmdCapture::name() const { return "EventCameraCmdCapture"; }

string EventCameraCmdCapture::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCmdCapture_Internal::EventCameraCmdCapture_Internal() : Event(id) {}

string EventCameraCmdCapture_Internal::name() const
{
    return "EventCameraCmdCapture_Internal";
}

string EventCameraCmdCapture_Internal::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCmdDownload::EventCameraCmdDownload(bool download)
    : Event(id), download(download)
{
}

string EventCameraCmdDownload::name() const { return "EventCameraCmdDownload"; }

string EventCameraCmdDownload::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCmdDownload_Internal::EventCameraCmdDownload_Internal() : Event(id)
{
}

string EventCameraCmdDownload_Internal::name() const
{
    return "EventCameraCmdDownload_Internal";
}

string EventCameraCmdDownload_Internal::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraConnected::EventCameraConnected() : Event(id) {}

string EventCameraConnected::name() const { return "EventCameraConnected"; }

string EventCameraConnected::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraReady::EventCameraReady() : Event(id) {}

string EventCameraReady::name() const { return "EventCameraReady"; }

string EventCameraReady::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraDisconnected::EventCameraDisconnected() : Event(id) {}

string EventCameraDisconnected::name() const
{
    return "EventCameraDisconnected";
}

string EventCameraDisconnected::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraConnectionError::EventCameraConnectionError() : Event(id) {}

string EventCameraConnectionError::name() const
{
    return "EventCameraConnectionError";
}

string EventCameraConnectionError::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraError::EventCameraError() : Event(id) {}

string EventCameraError::name() const { return "EventCameraError"; }

string EventCameraError::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraIgnoreError::EventCameraIgnoreError() : Event(id) {}

string EventCameraIgnoreError::name() const { return "EventCameraIgnoreError"; }

string EventCameraIgnoreError::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCmdLowLatency::EventCameraCmdLowLatency(bool low_latency)
    : Event(id), low_latency(low_latency)
{
}

string EventCameraCmdLowLatency::name() const
{
    return "EventCameraCmdLowLatency";
}

string EventCameraCmdLowLatency::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraCaptureDone::EventCameraCaptureDone(bool downloaded, string file)
    : Event(id), downloaded(downloaded), file(file)
{
}

string EventCameraCaptureDone::name() const { return "EventCameraCaptureDone"; }

string EventCameraCaptureDone::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventCameraControllerState::EventCameraControllerState(uint8_t state)
    : Event(id), state(state)
{
}

string EventCameraControllerState::name() const
{
    return "EventCameraControllerState";
}

string EventCameraControllerState::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetShutterSpeed::EventConfigGetShutterSpeed() : Event(id) {}

string EventConfigGetShutterSpeed::name() const
{
    return "EventConfigGetShutterSpeed";
}

string EventConfigGetShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigSetShutterSpeed::EventConfigSetShutterSpeed(int32_t shutter_speed)
    : Event(id), shutter_speed(shutter_speed)
{
}

string EventConfigSetShutterSpeed::name() const
{
    return "EventConfigSetShutterSpeed";
}

string EventConfigSetShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueShutterSpeed::EventConfigValueShutterSpeed(
    int32_t shutter_speed, bool bulb)
    : Event(id), shutter_speed(shutter_speed), bulb(bulb)
{
}

string EventConfigValueShutterSpeed::name() const
{
    return "EventConfigValueShutterSpeed";
}

string EventConfigValueShutterSpeed::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetAperture::EventConfigGetAperture() : Event(id) {}

string EventConfigGetAperture::name() const { return "EventConfigGetAperture"; }

string EventConfigGetAperture::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigSetAperture::EventConfigSetAperture(int32_t aperture)
    : Event(id), aperture(aperture)
{
}

string EventConfigSetAperture::name() const { return "EventConfigSetAperture"; }

string EventConfigSetAperture::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueAperture::EventConfigValueAperture(int32_t aperture)
    : Event(id), aperture(aperture)
{
}

string EventConfigValueAperture::name() const
{
    return "EventConfigValueAperture";
}

string EventConfigValueAperture::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetISO::EventConfigGetISO() : Event(id) {}

string EventConfigGetISO::name() const { return "EventConfigGetISO"; }

string EventConfigGetISO::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigSetISO::EventConfigSetISO(int32_t iso) : Event(id), iso(iso) {}

string EventConfigSetISO::name() const { return "EventConfigSetISO"; }

string EventConfigSetISO::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueISO::EventConfigValueISO(int32_t iso) : Event(id), iso(iso) {}

string EventConfigValueISO::name() const { return "EventConfigValueISO"; }

string EventConfigValueISO::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetBattery::EventConfigGetBattery() : Event(id) {}

string EventConfigGetBattery::name() const { return "EventConfigGetBattery"; }

string EventConfigGetBattery::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueBattery::EventConfigValueBattery(int32_t battery)
    : Event(id), battery(battery)
{
}

string EventConfigValueBattery::name() const
{
    return "EventConfigValueBattery";
}

string EventConfigValueBattery::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetFocalLength::EventConfigGetFocalLength() : Event(id) {}

string EventConfigGetFocalLength::name() const
{
    return "EventConfigGetFocalLength";
}

string EventConfigGetFocalLength::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueFocalLength::EventConfigValueFocalLength(int32_t focal_length)
    : Event(id), focal_length(focal_length)
{
}

string EventConfigValueFocalLength::name() const
{
    return "EventConfigValueFocalLength";
}

string EventConfigValueFocalLength::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetFocusMode::EventConfigGetFocusMode() : Event(id) {}

string EventConfigGetFocusMode::name() const
{
    return "EventConfigGetFocusMode";
}

string EventConfigGetFocusMode::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueFocusMode::EventConfigValueFocusMode(string focus_mode)
    : Event(id), focus_mode(focus_mode)
{
}

string EventConfigValueFocusMode::name() const
{
    return "EventConfigValueFocusMode";
}

string EventConfigValueFocusMode::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetLongExpNR::EventConfigGetLongExpNR() : Event(id) {}

string EventConfigGetLongExpNR::name() const
{
    return "EventConfigGetLongExpNR";
}

string EventConfigGetLongExpNR::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueLongExpNR::EventConfigValueLongExpNR(bool long_exp_nr)
    : Event(id), long_exp_nr(long_exp_nr)
{
}

string EventConfigValueLongExpNR::name() const
{
    return "EventConfigValueLongExpNR";
}

string EventConfigValueLongExpNR::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetVibRed::EventConfigGetVibRed() : Event(id) {}

string EventConfigGetVibRed::name() const { return "EventConfigGetVibRed"; }

string EventConfigGetVibRed::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueVibRed::EventConfigValueVibRed(bool vr) : Event(id), vr(vr) {}

string EventConfigValueVibRed::name() const { return "EventConfigValueVibRed"; }

string EventConfigValueVibRed::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetCaptureTarget::EventConfigGetCaptureTarget() : Event(id) {}

string EventConfigGetCaptureTarget::name() const
{
    return "EventConfigGetCaptureTarget";
}

string EventConfigGetCaptureTarget::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigSetCaptureTarget::EventConfigSetCaptureTarget(string target)
    : Event(id), target(target)
{
}

string EventConfigSetCaptureTarget::name() const
{
    return "EventConfigSetCaptureTarget";
}

string EventConfigSetCaptureTarget::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueCaptureTarget::EventConfigValueCaptureTarget(string target)
    : Event(id), target(target)
{
}

string EventConfigValueCaptureTarget::name() const
{
    return "EventConfigValueCaptureTarget";
}

string EventConfigValueCaptureTarget::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetCameraMode::EventConfigGetCameraMode() : Event(id) {}

string EventConfigGetCameraMode::name() const
{
    return "EventConfigGetCameraMode";
}

string EventConfigGetCameraMode::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigValueCameraMode::EventConfigValueCameraMode(string target)
    : Event(id), target(target)
{
}

string EventConfigValueCameraMode::name() const
{
    return "EventConfigValueCameraMode";
}

string EventConfigValueCameraMode::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}

EventConfigGetCommon::EventConfigGetCommon() : Event(id) {}

string EventConfigGetCommon::name() const { return "EventConfigGetCommon"; }

string EventConfigGetCommon::to_string(int indent) const
{
    nlohmann::json j = *this;
    if (indent < 0)
        return fmt::format("{} {}", name(), j.dump(indent));
    else
        return fmt::format("{}\n{}", name(), j.dump(indent));
}
